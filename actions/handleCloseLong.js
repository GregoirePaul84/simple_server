const { getGainMessage, getLossMessage } = require('../botmessages');

// Fonction pour gÃ©rer une vente
const handleCloseLong = async(binance, symbol, price, btcBalance, hasOpenLongPosition, lastBuyPrice) => {

    // VÃ©rification qu'une position longue existe
    if (!hasOpenLongPosition) {
        console.error('Pas de position longue ouverte. Vente non autorisÃ©e.');
        return res.status(400).send('Pas de position longue ouverte.');
    }

    // VÃ©rification du solde BTC pour une vente
    if (btcBalance <= 0) {
        console.error('Solde insuffisant en BTC pour vendre.');
        return res.status(400).send('Solde BTC insuffisant.');
    }

    const quantityToSell = btcBalance.toFixed(6);

    // ATTENTION : la ligne suivante interagit avec Binance
    // const order = await binance.marketSell(symbol, quantityToSell);
    // console.log('ClÃ´ture de la position longue :', order);

    if (lastBuyPrice) {
        const profit = ((price - lastBuyPrice) * quantityToSell).toFixed(2);
        const profitPercentage = (((price - lastBuyPrice) / lastBuyPrice) * 100).toFixed(2);

        totalProfitCumulative += parseFloat(profit);
        totalProfitMonthly += parseFloat(profit);

        bot.sendMessage(
            chatId,
            profit >= 0  
                ? bot.sendMessage(
                    chatId,
                    `âœ… Long clÃ´turÃ© : : PAYÃ‰ ! ðŸ¤‘ðŸ¤‘ðŸ¤‘ðŸ¤‘\n\n` +
                    `- Symbole : BTC / USDC\n` +
                    `- Gain rÃ©alisÃ© ðŸ’¶ : ${profit} USDC\n` +
                    `- Pourcentage rÃ©alisÃ© ðŸ“Š : ${profitPercentage} %\n\n` +
                    `- Gains mensuels ðŸ’° : ${totalProfitMonthly.toFixed(2)} USDC, ${totalProfitMonthlyPercentage} %\n` +
                    `- Gains totaux ðŸ’°ðŸ’° : ${totalProfitCumulative.toFixed(2)} USDC, ${totalProfitCumulativePercentage} %\n\n` +
                    `- Capital disponible ðŸ’Ž : ${USDCBalance} USDC\n\n` +
                    `ðŸ’ª ${getGainMessage()}`
                )
                : bot.sendMessage(
                    chatId,
                    `âœ… Long clÃ´turÃ© : : Pas payÃ©. ðŸ’©\n\n` +
                    `- Symbole : BTC / USDC\n` +
                    `- Perte rÃ©alisÃ©e ðŸ’© : -${Math.abs(profit)} USDC\n` +
                    `- Pourcentage rÃ©alisÃ© ðŸ“Š : ${profitPercentage} %\n\n` +
                    `- Gains mensuels ðŸ’° : ${totalProfitMonthly.toFixed(2)} USDC, ${totalProfitMonthlyPercentage} %\n` +
                    `- Gains totaux ðŸ’°ðŸ’° : ${totalProfitCumulative.toFixed(2)} USDC, ${totalProfitCumulativePercentage} %\n\n` +
                    `- Capital disponible ðŸ’Ž : ${USDCBalance} USDC\n\n` +
                    `ðŸ§˜ ${getLossMessage()}`
                )
        );
    } else {
        bot.sendMessage(
            chatId,
            `âœ… Long clÃ´turÃ© : Pas de donnÃ©es disponibles. Merci de vÃ©rifier les transactions.`
        );
    }

    hasOpenLongPosition = false;
    lastBuyPrice = null;
    
}

module.exports = { handleCloseLong };