const { getGainMessage, getLossMessage } = require('../botmessages');

// Fonction pour gÃ©rer une vente
const handleCloseLong = async(
    binance, 
    symbol, 
    price, 
    btcBalance, 
    hasOpenLongPosition, 
    lastBuyPrice, 
    initialCapital, 
    totalProfitCumulative, 
    totalProfitMonthly, 
    bot, 
    chatId
) => {

    // Test local
    // hasOpenLongPosition = true;
    // btcBalance = 0.0010000;
    // lastBuyPrice = 110000;
    // totalProfitCumulative = 22.27;
    // totalProfitMonthly = 22.27;

    // VÃ©rification qu'une position longue existe
    if (!hasOpenLongPosition) {
        console.error('Pas de position longue ouverte. Impossible de clÃ´turer.');
        throw new Error('Pas de position longue ouverte. Impossible de clÃ´turer.');
    }

    // VÃ©rification du solde BTC pour une vente
    if (btcBalance <= 0) {
        console.error('Solde BTC insuffisant. Impossible de clÃ´turer.');
        throw new Error('Solde BTC insuffisant. Impossible de clÃ´turer.');
    }

    const quantityToSell = btcBalance.toFixed(6);

    // ATTENTION : la ligne suivante interagit avec Binance
    // const order = await binance.marketSell(symbol, quantityToSell);
    console.log('ClÃ´ture de la position longue.');

    // RÃ©cupÃ©ration de la nouvelle balance
    const accountInfo = await binance.balance();
        
    const newUsdcBalance = parseFloat(accountInfo.USDC.available);
    const newBtcBalance = parseFloat(accountInfo.BTC.available);

    if (lastBuyPrice) {
        const profit = ((price - lastBuyPrice) * quantityToSell).toFixed(2);
        const profitPercentage = (((price - lastBuyPrice) / lastBuyPrice) * 100).toFixed(2);

        totalProfitCumulative += parseFloat(profit);
        totalProfitMonthly += parseFloat(profit);

        const totalProfitCumulativePercentage = ((totalProfitCumulative / initialCapital) * 100).toFixed(2); // Pourcentage cumulÃ© depuis le dÃ©but
        const totalProfitMonthlyPercentage = ((totalProfitMonthly / initialCapital) * 100).toFixed(2); // Pourcentage cumulÃ© depuis le mois

        const minusOrPlusCumulative = totalProfitCumulative >= 0 ? '+' : '';
        const minusOrPlusMonthly = totalProfitMonthly >= 0 ? '+' : '';

        profit >= 0  
            ? bot.sendMessage(
                chatId,
                `âœ… Long clÃ´turÃ© : PAYÃ‰ ! ðŸ¤‘ðŸ¤‘ðŸ¤‘ðŸ¤‘\n\n` +
                `- Symbole : BTC / USDC\n` +
                `- Gain rÃ©alisÃ© ðŸ’¶ : +${profit} USDC\n` +
                `- Pourcentage rÃ©alisÃ© ðŸ“Š : +${profitPercentage} %\n\n` +
                `- Gains mensuels ðŸ’° : ${minusOrPlusMonthly}${totalProfitMonthly.toFixed(2)} USDC, ${minusOrPlusMonthly}${totalProfitMonthlyPercentage} %\n` +
                `- Gains totaux ðŸ’°ðŸ’° : ${minusOrPlusCumulative}${totalProfitCumulative.toFixed(2)} USDC, ${minusOrPlusCumulative}${totalProfitCumulativePercentage} %\n\n` +
                `- Capital disponible ðŸ’Ž : ${newUsdcBalance.toFixed(2)} USDC, ${newBtcBalance} BTC\n\n` +
                `ðŸ’ª ${getGainMessage()}`
            )
            : bot.sendMessage(
                chatId,
                `âœ… Long clÃ´turÃ© : Pas payÃ©. ðŸ’©\n\n` +
                `- Symbole : BTC / USDC\n` +
                `- Perte rÃ©alisÃ©e ðŸ’© : -${Math.abs(profit)} USDC\n` +
                `- Pourcentage rÃ©alisÃ© ðŸ“Š : ${profitPercentage} %\n\n` +
                `- Gains mensuels ðŸ’° : ${minusOrPlusMonthly}${totalProfitMonthly.toFixed(2)} USDC, ${minusOrPlusMonthly}${totalProfitMonthlyPercentage} %\n` +
                `- Gains totaux ðŸ’°ðŸ’° : ${minusOrPlusCumulative}${totalProfitCumulative.toFixed(2)} USDC, ${minusOrPlusCumulative}${totalProfitCumulativePercentage} %\n\n` +
                `- Capital disponible ðŸ’Ž : ${newUsdcBalance.toFixed(2)} USDC, ${newBtcBalance} BTC\n\n` +
                `ðŸ§˜ ${getLossMessage()}`
        );
    } else {
        bot.sendMessage(
            chatId,
            `âœ… Long clÃ´turÃ© : Pas de donnÃ©es disponibles. Merci de vÃ©rifier les transactions.`
        );
    }

    hasOpenLongPosition = false;
    lastBuyPrice = null;
    
}

module.exports = { handleCloseLong };