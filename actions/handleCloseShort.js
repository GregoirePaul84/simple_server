const { getGainMessage, getLossMessage } = require('../botmessages');
const { default: takeLongPosition } = require('./takeLongPosition');

// Fonction pour gÃ©rer une vente
const handleCloseShort = async(binance, symbol, price, usdcBalance, hasOpenShortPosition, lastSellPrice, shortQuantity) => {

    // VÃ©rification qu'une position courte existe
    if (!shortQuantity || shortQuantity <= 0) {
        console.error('Pas de position courte ouverte. Achat non autorisÃ©.');
        bot.sendMessage(
            chatId,
            'Erreur: tentative de clÃ´ture de short => pas de position courte existante \n', error
        )
        return;
    }

    // VÃ©rification du solde USDC pour racheter la position
    const requiredUSDC = price * shortQuantity;
    if (usdcBalance < requiredUSDC) {
        console.error('Solde insuffisant en USDC pour racheter la position.');
        bot.sendMessage(
            chatId,
            'Erreur: tentative de clÃ´ture de short => solde insuffisant en USDC pour racheter la position. \n', error
        )
        return;
    }

    // ATTENTION : la ligne suivante interagit avec Binance
    // const order = await binance.marketBuy(symbol, shortQuantity);
    // console.log('ClÃ´ture du short :', order);

    if (lastSellPrice) {
        const profit = ((lastSellPrice - price) * quantityToBuy).toFixed(2); // Profit ou perte de la transaction en USDC
        const profitPercentage = (((lastSellPrice - price) / lastSellPrice) * 100).toFixed(2); // Pourcentage de la transaction

        totalProfitCumulative += parseFloat(profit); // Profit cumulÃ© depuis le dÃ©but
        totalProfitMonthly += parseFloat(profit); // Profit cumulÃ© depuis le mois

        const totalProfitCumulativePercentage = ((totalProfitCumulative / initialCapital) * 100).toFixed(2); // Pourcentage cumulÃ© depuis le dÃ©but
        const totalProfitMonthlyPercentage = ((totalProfitMonthly / initialCapital) * 100).toFixed(2); // Pourcentage cumulÃ© depuis le mois

        bot.sendMessage(
            chatId,
            profit >= 0  
                ? bot.sendMessage(
                    chatId,
                    `âœ… Short clÃ´turÃ© : PAYÃ‰ ! ðŸ¤‘ðŸ¤‘ðŸ¤‘ðŸ¤‘\n\n` +
                    `- Symbole : BTC / USDC\n` +
                    `- Gain rÃ©alisÃ© ðŸ’¶ : ${profit} USDC\n` +
                    `- Pourcentage rÃ©alisÃ© ðŸ“Š : ${profitPercentage} %\n\n` +
                    `- Gains mensuels ðŸ’° : ${totalProfitMonthly.toFixed(2)} USDC, ${totalProfitMonthlyPercentage} %\n` +
                    `- Gains totaux ðŸ’°ðŸ’° : ${totalProfitCumulative.toFixed(2)} USDC, ${totalProfitCumulativePercentage} %\n\n` +
                    `- Capital disponible ðŸ’Ž : ${USDCBalance} USDC\n\n` +
                    `ðŸ’ª ${getGainMessage()}`
                )
                : bot.sendMessage(
                    chatId,
                    `âœ… Short clÃ´turÃ© : Pas payÃ©. ðŸ’©\n\n` +
                    `- Symbole : BTC / USDC\n` +
                    `- Perte rÃ©alisÃ©e ðŸ’© : -${Math.abs(profit)} USDC\n` +
                    `- Pourcentage rÃ©alisÃ© ðŸ“Š : ${profitPercentage} %\n\n` +
                    `- Gains mensuels ðŸ’° : ${totalProfitMonthly.toFixed(2)} USDC, ${totalProfitMonthlyPercentage} %\n` +
                    `- Gains totaux ðŸ’°ðŸ’° : ${totalProfitCumulative.toFixed(2)} USDC, ${totalProfitCumulativePercentage} %\n\n` +
                    `- Capital disponible ðŸ’Ž : ${USDCBalance} USDC\n\n` +
                    `ðŸ§˜ ${getLossMessage()}`
                )
        );
    } else {
        bot.sendMessage(
            chatId,
            `âœ… Short clÃ´turÃ© : Pas de donnÃ©es disponibles. Merci de vÃ©rifier les transactions.`
        );
    }

    hasOpenShortPosition = false;
    lastSellPrice = null;
    shortQuantity = null;
}

module.exports = { handleCloseShort };
