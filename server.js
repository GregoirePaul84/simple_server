require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const Binance = require('node-binance-api');
const TelegramBot = require('node-telegram-bot-api');
const { getGainMessage, getLossMessage } = require('./botmessages');
const { scheduleMonthlyReport, sendMonthlyReport } = require('./monthlyReport'); // Import du fichier pour le rapport mensuel

// Configuration de Telegram
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
const chatId = process.env.TELEGRAM_CHAT_ID;

const externalURL = process.env.RENDER_EXTERNAL_URL || `http://localhost:${port}`;

// Instance Express
const app = express();
const port = 3000;

// Middleware pour traiter les JSON re√ßus par tradingview
app.use(bodyParser.json());

// Configuration de Binance API
const binance = new Binance().options({
    APIKEY: process.env.BINANCE_API_KEY, // Cl√© API Binance
    APISECRET: process.env.BINANCE_API_SECRET, // Cl√© secr√®te Binance
    family: 4, // Forcer l'utilisation d'IPv4
    useServerTime: true, // Synchronisation avec l'heure du serveur Binance
    reconnect: true, // Permet de se reconnecter automatiquement
    verbose: true, // Affiche les logs pour aider au d√©bogage
});

// Variables de base
let hasOpenLongPosition = false; // Position longue en cours ou non
let lastBuyPrice = null; // Dernier prix d'achat
let totalProfitCumulative = 0; // Total depuis le d√©but
let totalProfitMonthly = 0; // Total du mois en cours
const initialCapital = 100; // Capital initial en USDT

// Setter pour r√©initialiser les profits mensuels
const resetMonthlyProfit = () => {
    totalProfitMonthly = 0;
    console.log('Profit mensuel r√©initialis√©.');
};

// Route pour tester la connexion
app.get('/', (_, res) => {
    res.send('Le serveur fonctionne correctement !');
});

// Endpoint pour r√©cup√©rer le solde
app.get('/balance', async (_, res) => {
    try {
        const accountInfo = await binance.balance(); // R√©cup√®re le solde complet

        const btcBalance = accountInfo.BTC.available; // Solde BTC disponible
        const usdtBalance = accountInfo.USDT.available; // Solde USDT disponible
        
        res.status(200).json({
            message: 'Solde r√©cup√©r√© avec succ√®s',
            btcBalance,
            usdtBalance,
        });
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration du solde :');
        res.status(500).json({ error: 'Impossible de r√©cup√©rer le solde' });
    }
});

// Endpoint Webhook pour recevoir les alertes de TradingView
app.post('/webhook', async (req, res) => {
    const { action, symbol, key } = req.body;

    // V√©rification de la cl√© secr√®te
    if (key !== process.env.WEBHOOK_SECRET) {
        return res.status(401).send('Cl√© secr√®te incorrecte.');
    }

    try {
        // R√©cup√©ration du solde total disponible pour le trading
        const accountInfo = await binance.balance();
        const usdtBalance = parseFloat(accountInfo.USDT.available);
        const btcBalance = parseFloat(accountInfo.BTC.available);

        // V√©rification des positions ouvertes
        const openOrders = await binance.openOrders(symbol);
        if (openOrders.length > 0) {
            console.error(`Une position est d√©j√† ouverte pour ${symbol}.`);
            return res.status(400).send('Position d√©j√† ouverte.');
        }

        // Prix actuel BTC / USDT
        const prices = await binance.prices();
        const price = parseFloat(prices[symbol]);

        // Calcul de la quantit√© bas√©e sur le solde
        const quantityToBuy = (usdtBalance / price).toFixed(6);
        const quantityToSell = btcBalance.toFixed(6);

        if (action === 'buy') {
            // // V√©rification du solde USDT pour un achat
            // if (usdtBalance <= 0) {
            //     console.error('Solde insuffisant en USDT pour acheter.');
            //     return res.status(400).send('Solde USDT insuffisant.');
            // }

            // // Ex√©cution de l'ordre d'achat
            // const order = await binance.marketBuy(symbol, quantityToBuy);
            // console.log('Ordre d\'achat effectu√© :', order);

            hasOpenLongPosition = true; // Confirme qu'une position longue a √©t√© prise
            lastBuyPrice = price; // Enregistrement du prix d'achat

            // Envoi de notification Telegram
            bot.sendMessage(
                chatId,
                `‚úÖ Ordre d'achat ex√©cut√© :\n- Symbole : ${symbol}\n- Quantit√© : ${quantity}\n- Prix : ${price} USDT`
            );

            res.status(200).send('Ordre d\'achat ex√©cut√© avec succ√®s !');
        } else if (action === 'sell') {

            // V√©rification qu'une position longue existe
            if (!hasOpenLongPosition) {
                console.error('Pas de position longue ouverte. Vente non autoris√©e.');
                return res.status(400).send('Pas de position longue ouverte.');
            }

            // // V√©rification du solde BTC pour une vente
            // if (btcBalance <= 0) {
            //     console.error('Solde insuffisant en BTC pour vendre.');
            //     return res.status(400).send('Solde BTC insuffisant.');
            // }

            // // Ex√©cution de l'ordre de vente
            // const order = await binance.marketSell(symbol, quantityToSell);
            // console.log('Ordre de vente effectu√© :', order);

            if (lastBuyPrice) {
                const profit = ((price - lastBuyPrice) * quantityToSell).toFixed(2); // Gain ou perte en USDT
                const profitPercentage = (((price - lastBuyPrice) / lastBuyPrice) * 100).toFixed(2); // Le pourcentage de gain ou perte

                totalProfitCumulative += parseFloat(profit); // Mise √† jour du profit total
                totalProfitMonthly += parseFloat(profit); // Mise √† jour du profit mensuel

                const totalProfitCumulativePercentage = ((totalProfitCumulative / initialCapital) * 100).toFixed(2); // Pourcentage depuis le d√©but
                const totalProfitMonthlyPercentage = ((totalProfitMonthly / initialCapital) * 100).toFixed(2);

                if (profit >= 0) {
                    bot.sendMessage(
                        chatId,
                        `‚úÖ Ordre de vente ex√©cut√© : PAY√â ! ü§ëü§ëü§ëü§ë\n\n` +
                        `- Symbole : BTC / USDT\n` +
                        `- Gain r√©alis√© üí∂ : ${profit} USDT\n` +
                        `- Pourcentage r√©alis√© üìä : ${profitPercentage} %\n\n` +
                        `- Gains mensuels üí∞ : ${totalProfitMonthly.toFixed(2)} USDT, ${totalProfitMonthlyPercentage} %\n` +
                        `- Gains totaux üí∞üí∞ : ${totalProfitCumulative.toFixed(2)} USDT, ${totalProfitCumulativePercentage} %\n\n` +
                        `- Capital disponible üíé : ${usdtBalance} USDT\n\n` +
                        `üí™ ${getGainMessage()}`
                    );
                } else {
                    bot.sendMessage(
                        chatId,
                        `‚úÖ Ordre de vente ex√©cut√© : Pas pay√©. üí©\n\n` +
                        `- Symbole : BTC / USDT\n` +
                        `- Perte r√©alis√©e üí© : -${Math.abs(profit)} USDT\n` +
                        `- Pourcentage r√©alis√© üìä : ${profitPercentage} %\n\n` +
                        `- Gains mensuels üí∞ : ${totalProfitMonthly.toFixed(2)} USDT, ${totalProfitMonthlyPercentage} %\n` +
                        `- Gains totaux üí∞üí∞ : ${totalProfitCumulative.toFixed(2)} USDT, ${totalProfitCumulativePercentage} %\n\n` +
                        `- Capital disponible üíé : ${usdtBalance} USDT\n\n` +
                        `üßò ${getLossMessage()}`
                    );
                }
            } else {
                bot.sendMessage(chatId, `‚ö†Ô∏è Impossible de calculer les gains ou pertes : Dernier prix d'achat inconnu.`);
            }

            res.status(200).send('Ordre de vente ex√©cut√© avec succ√®s !');
        }
    } catch (error) {
        console.error('Erreur lors de l\'ex√©cution de l\'ordre :', error);

        // Notification d'erreur √† Telegram
        bot.sendMessage(chatId, `‚ùå Erreur lors de l'ex√©cution de l'ordre : ${error.message}`);
        
        res.status(500).send('Erreur lors de l\'ex√©cution de l\'ordre.');
    }
});


// Lancer le serveur
app.listen(port, () => {
    console.log(`Serveur en cours d'ex√©cution sur ${externalURL}`);
});

// Test du compte rendu mensuel
app.get('/test-monthly-report', (_, res) => {
    // Appel direct √† la fonction pour g√©n√©rer un rapport
    sendMonthlyReport(bot, chatId, totalProfitCumulative, initialCapital, totalProfitMonthly);
    res.status(200).send('Rapport mensuel envoy√© (test).');
});

// Planification du rapport mensuel
scheduleMonthlyReport(bot, chatId, () => totalProfitCumulative, () => totalProfitMonthly, resetMonthlyProfit);
