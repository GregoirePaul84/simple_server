const axios = require('axios');

// G√©n√©rer un listenKey pour le portefeuille Margin isol√©
const getIsolatedMarginListenKey = async (symbol) => {
    try {
        const response = await axios.post(
            `https://api.binance.com/sapi/v1/userDataStream/isolated?symbol=${symbol}`,
            null,
            { headers: { 'X-MBX-APIKEY': process.env.BINANCE_MARGIN_API_KEY } }
        );

        if (!response.data || !response.data.listenKey) {
            throw new Error('Aucune listenKey re√ßue pour le portefeuille Margin isol√©.');
        }

        console.log(`ListenKey g√©n√©r√©e pour le portefeuille Margin isol√© (${symbol}) :`, response.data.listenKey);
        return response.data.listenKey;
    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration du listenKey Margin isol√© :', error.message);
        throw error;
    }
};

// Renouveler le listenKey
const keepAliveMarginListenKey = async (listenKey, symbol) => {
    try {
        console.log(`Renouvellement de la listenKey : ${listenKey}`);

        const response = await axios.put(
            `https://api.binance.com/sapi/v1/userDataStream/isolated`, // Correction de l'URL
            null,
            {
                headers: { 'X-MBX-APIKEY': process.env.BINANCE_MARGIN_API_KEY },
                params: { listenKey, symbol } // Param√®tre ici et non dans l'URL
            }
        );

        console.log('‚úÖ ListenKey renouvel√© avec succ√®s pour le portefeuille Margin.', response.data);
    } catch (error) {
        console.error('‚ùå Erreur lors du renouvellement du listenKey Margin :', error.response?.data || error.message);

        // V√©rifie si l'erreur est due √† une cl√© expir√©e et r√©g√©n√®re un listenKey
        if (error.response?.status === 400) {
            console.error('üîÑ ListenKey invalide ou expir√©e. G√©n√©ration d\'une nouvelle cl√©...');
            return await getIsolatedMarginListenKey('BTCUSDC'); // Fonction pour g√©n√©rer une nouvelle listenKey
        }
    }
};

module.exports = { getIsolatedMarginListenKey, keepAliveMarginListenKey };
